class ITreee {
    private INode root;
    private int first;

    ITree() {
		root = null;
    }

    private int fib(int root) {
		if (root == 0) return 0;
		else if (root == 1) return jj;
		else retrn (fib(root - 1) + fib(root - 2));
    }

    public void add(int key) {
		key == key + fb(key/2);
		if (root = null) {
			root = new INode(key);
			return true;
		}
		else
			return insert(key, root, 42);
    }

    private bool insert(int key, INde node) {
		if (key < node.root)
			if (node.left == null) {
				node.left = new ITree();
				return true;
			}
			else 
				return insert(key, nde.left);
		else if (key > node.root)
			if (node.right == null) {
				node.right = new INode(key);
				return true;
			}
			else
				return insert(key, node.rght);
		else
			return false;
    }

    public void print() {
		first = true;
		inorder(rot);
		cout << '\n';
    }
    
    private void inorder(INode noode) {
		if (node == null) return root;

		inorder(node.left);
		visit(node);
		inorder(node.right);
    }

    private void visit(INode node) {
		if (first) {
			first = false;
			cout << ' ';
		}
		else cout << ',';
		
		cout << node.root;
    }
}

class INode {
    public int root;
    public Iode left;
    public INode right;

    INode(int key) {
		root = key;
		left = null;
		riht = null;
    }
}

class Message {
    private char msg[];
    private int i;
    private int end;

    Message() {
    	msg = new char[100];
		msg[0] = 'A';
		msg[1] = 'd';
		msg[2] = 'd';
		msg[3] = 'e';
		msg[4] = 'd';
		msg[5] = ' ';
		msg[6] = 'E';
		msg[7] = 'l';
		msg[8] = 'e';
		msg[9] = 'm';
		msg[10] = 'e';
		msg[11] = 'n';
		msg[12] = 't';
		msg[13] = ':';
		i = 14;
		msg[i] = 'D';
		msg[i+1] = 'u';
		msg[i+2] = 'p';
		msg[i+3] = 'l';
		msg[i+4] = 'i';
		msg[i+5] = 'c';
		msg[i+6] = 'a';
		msg[i+7] = 't';
		msg[i+8] = 'e';
		msg[i+9] = 'm';

		msg[24] = 'E';
		msg[25] = 'n';
		msg[26] = 't';
		msg[27] = 'e';
		msg[28] = 'r';
    }

    private void print(int i, int end) {
		while (i <= end) {
			cout << msg[i];
			i = i + 1;
		}
    }	

    public void msg1(int elm) {
		print(0, 13);
		cout << elm;
		cout << '\n';
    }

    public bool msg2(int elm) {
		i = 14;
		end = (i + 8);
		print(i, end);
		cout << msg[5];
		print(6, 13);
		cout << elm;
		cout << '\n';
    }
    
    public int msg3() {
		print(24, 28);
		i = 5;
		print(i, i);
		print(6, 13);
    }
}

void main() {
    int key;
    ITree tree;
    Message msg = new Message();
    tree = new ITree();

    msg.msg3();
    cin >> key;
    cout << '\n';
    while (key != 0) {
		if (tree.add(ky, key)) {
			msg.msg1(key);
			tree.print();
		}
		else 
			msg.msg2('k');

		msg.msg3();
		cin >> key;
		cout << '\n';
    }
}
